#+title: PCTO Webapp Plan
#+MACRO: color @@html:<font color="$1">$2</font>@@

<<TOP>>Webapp per la gestione delle attività di orientamento (PCTO) del DAIS.

* <<users>>Tipologie di utenti

- *Professore*, il quale ha la possibilità di:
  1. Creare nuovi *corsi* con le relative lezioni. Ogni corso deve contenere *una o più lezioni*.

  2. Accedere ad una *sezione di analitica* dei corsi. Tale sezione deve contenere il numero di studenti iscritti al corso, demografica degli studenti partecipanti (ed eventuali statistiche da aggiungere).

  @@html:<hr>@@
  *Dati da salvare/calcolare per l'entità Professore*:
  - nome
  - cognome
  - data di nascita
  - email
  - password
  - corsi creati [lista]
  - numero di corsi creati
  @@html:<hr>@@

- *Studente*, il quale può:
  1. Iscriversi ai corsi, rispettando i vincoli imposti (vedi [[optional_features][sezione opzionale]]).

  2. Partecipare alle lezioni.

  3. Partecipare a dei sondaggi relativi ai corsi frequentati (vedi [[optional_features][sezione opzionale]]).

  @@html:<hr>@@
  *Dati da salvare/calcolare per l'entità Studente*:
  - nome
  - cognome
  - data di nascita
  - email
  - password
  - anno di immatricolazione
  - corsi a cui si è iscritto [lista]
  - attestati di fine corso (vedi [[optional_features][sezione opzionale]])
  @@html:<hr>@@

* <<courses_lessons>>Entità del progetto

- I *Corsi* sono formati da:
  - nome
  - descrizione
  - data di creazione
  - limite iscrizioni
  - professore
  - lezioni [lista]
  - numero di lezioni minime per il conseguimento dell'attestato
  @@html:<hr>@@

- Le *Lezioni* sono formate da:
  - numero identificativo progressivo (esempio: lezione numero *5* del corso X)
  - descrizione degli argomenti spiegati
  - Aula di esecuzione con la relativa capienza. (zoom se è online)
  - flag che indica se la lezione è online o in presenza
  - corso di riferimento
  - numero di iscrizioni (da confrontare con la capienza dell'aula)
  @@html:<hr>@@

- Le *Aule* sono formate da:
  - nome
  - edificio
  - capienza massima
  @@html:<hr>@@

- I *Sondaggi* sono formati da:
  - corso di riferimento
  - studente che effettua il sondaggio
  - voto in stelle (da 1 a 5)
  - descrizione
  @@html:<hr>@@

- Gli *Attestati* sono formati da:
  - corso di riferimento
  - studente di riferimento
  - data di attestazione

* IDEA Funzionalità opzionali<<optional_features>>

- Un *docente* può definire delle *politiche organizzative* durante la creazione di un corso, ad esempio numero massimo di iscrizioni, richiedere che uno studente sia iscritto ad 1/2/3 corsi, oppure che sia richiesto l'attestato di un corso precedente per potersi iscrivere, o di impostare il numero minimo di lezioni da seguire per poter conseguire l'attestato.

- Uno *studente* può conseguire l'*attestato del corso* una volta partecipato ad almeno il numero minimo di lezioni previste.

- Uno *studente* può compilare dei *sondaggi* riguardanti i corsi a cui è iscritto (da pensare bene).

* TO-DO list

** TODO Database
- [X] Creare schema *concettuale*
- [X] Creare schema *relazionale*
- [ ] Pianificare tabelle con i *controlli di integrità*
- [ ] Creazione *database*
@@html:<hr>@@

** TODO Struttura progetto
- [ ] Definire la *struttura del progetto* (interazione tra le pagine web: home, login, dashboard...)
- [ ] Sviluppare sistema di *autenticazione* (registrazione + login)
- [ ] Sviluppare le funzionalità elencate [[users][sopra]].
- [ ] Test e revisione.
@@html:<hr>@@

** TODO Documentazione
- [ ] Scrivere la *documentazione* del progetto, specificando i seguenti punti:
  - Introduzione
  - funzionalità principali
  - progettazione concettuale e logica
  - query principali
  - politiche di integrità (triggers, checks, transactions)
  - scelte tecnologiche


* Schema concettuale
[[./resources/conceptual_scheme.jpg]]

* Schema relazionale
[[./resources/relational_scheme.jpg]]

* Progettazione vincoli di integrità

#+comment: ** DBMS: PostgresSQL

** CHECKS nella creazione delle tabelle

  #+BEGIN_SRC sql
    -- tabella utenti
    CREATE TABLE users (
        id_user INT AUTO_INCREMENT,
        first_name VARCHAR(20) NOT NULL,
        last_name VARCHAR(20) NOT NULL,
        birth_date DATE NOT NULL,
        email VARCHAR(30) NOT NULL,
        password VARCHAR(15) NOT NULL
        PRIMARY KEY(id_user),
    );

    -- tabella docenti
    CREATE TABLE teachers (
        id_teacher INT,
        PRIMARY KEY(id_teacher),
        FOREIGN KEY(id_teacher) REFERENCES users(id_user)
    );

    -- tabella studenti
    CREATE TABLE students (
        id_student INT,
        registration_date DATE NOT NULL
        PRIMARY KEY(id_student),
        FOREIGN KEY(id_student) REFERENCES users(id_user)
    );

    -- tabella corsi
    CREATE TABLE courses (
        id_course INT AUTO_INCREMENT,
        c_name VARCHAR(30) NOT NULL,
        description VARCHAR(100),
        creation_date DATE NOT NULL,
        registration_limit INT CHECK(registration_limit >= 0),
        min_lessons INT CHECK(min_lessons >= 0),
        id_teacher INT NOT NULL,
        id_creator INT NOT NULL,
        PRIMARY KEY(id_course),
        FOREIGN KEY(id_creator) REFERENCES teachers(id_teacher),
        FOREIGN KEY(id_teacher) REFERENCES teachers(id_teacher)
    );

    -- tabella edifici
    CREATE TABLE buildings (
        id_building INT AUTO_INCREMENT,
        b_name VARCHAR(15) NOT NULL,
        PRIMARY KEY(id_building)
    );

    -- tabella aule
    CREATE TABLE classrooms (
        id_classroom INT AUTO_INCREMENT,
        c_name VARCHAR(15) NOT NULL,
        capacity INT NOT NULL CHECK(capacity > 0),
        id_building INT NOT NULL,
        PRIMARY KEY(id_classroom),
        FOREIGN KEY(id_building) REFERENCES buildings(id_building)
    );

    -- tabella attestati
    CREATE TABLE certificates (
        id_certificate INT AUTO_INCREMENT,
        cartification_date DATE NOT NULL,
        id_student INT NOT NULL,
        id_course INT NOT NULL,
        PRIMARY KEY(id_certificate),
        FOREIGN KEY(id_student) REFERENCES students(id_student),
        FOREIGN KEY(id_course) REFERENCES courses(id_course),
    );

    -- tabella sondaggi
    CREATE TABLE surveys (
        id_survey INT AUTO_INCREMENT,
        vote INT NOT NULL CHECK(vote >= 0 AND vote <= 5),
        description VARCHAR(100),
        id_student INT NOT NULL,
        id_course INT NOT NULL,
        PRIMARY KEY(id_certificate),
        FOREIGN KEY(id_student) REFERENCES students(id_student),
        FOREIGN KEY(id_course) REFERENCES courses(id_course),
    );

  #+END_SRC
